{"version":3,"sources":["components/covid-map/mapview/MapView.js","components/covid-map/listview/ListView.js","components/covid-map/patient_info/PatientInfo.js","components/covid-map/sliderbar/SliderBar.js","components/LinkContainer/LinkContainer.js","components/covid-map/CovidMap.js","components/covid-stats/CovidStats.js","App.js","serviceWorker.js","index.js"],"names":["MapView","patients","onClickMarker","selectedPatient","id","googleMapsApiKey","mapContainerStyle","height","width","center","lat","lng","zoom","map","patient","index","key","position","onClick","name","address","memo","itemIndex","onClickPatient","listRef","useRef","Row","props","data","style","className","areEqual","patientsLength","Object","keys","length","assign","useEffect","current","scrollToItem","itemCount","itemSize","ref","itemData","date","verifyDate","substring","patientGroup","note","SliderBar","handleSlider","useState","value","setValue","playable","setPlayable","speed","setSpeed","speedRef","increaseValue","useCallback","chosenDate","moment","initialDate","add","format","today","Date","endValue","diff","intervalId","setInterval","clearInterval","marks","label","buttonClass","console","log","Slider","classes","valueLabel","rail","track","markLabel","step","valueLabelDisplay","valueLabelFormat","onChange","event","newValue","min","max","defaultValue","LinkContainer","children","active","CovidMap","patientsData","patientSlider","setPatients","setSelectedPatient","axios","get","then","res","newPatients","filter","sort","a","b","to","checkDate","ptSlider","CovidStats","worldData","setWorldData","vnData","setVNData","infected","dead","cured","suspected","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","payload","unit","App","basename","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.93cc90a3.chunk.js","sourcesContent":["import React from 'react';\nimport {GoogleMap, LoadScriptNext, Marker, InfoBox} from '@react-google-maps/api';\nimport './MapView.scss';\n\nconst MapView = ({patients, onClickMarker, selectedPatient}) => {\n    return (\n        <LoadScriptNext\n            id=\"script-loader\"\n            googleMapsApiKey=\"AIzaSyBCZ5at1ctI-CxNBOt5xiWrktPaWAWXD8s\"\n        >\n            <GoogleMap\n                id=\"GoogleMap\"\n                mapContainerStyle={{height: \"600px\", width: \"100%\"}}\n                center={selectedPatient ? {lat: selectedPatient.lat, lng: selectedPatient.lng}\n                    : {lat: 10.762693, lng: 106.682731}}\n                zoom={selectedPatient ? 12 : 6}\n            >\n                {\n                    patients.map((patient, index) => {\n                        if (patient === selectedPatient) {\n                            return (\n                                <div key={index}>\n                                    <Marker\n                                        position={{lat: patient.lat, lng: patient.lng}}\n                                        onClick={() => onClickMarker(patient)}\n                                    />\n                                    <div>\n                                        <InfoBox\n                                            position={{lat: patient.lat, lng: patient.lng}}\n                                        >   \n                                            <div>\n                                                <p>{patient.name}</p>\n                                                <p>{patient.address}</p>\n                                            </div>   \n                                        </InfoBox>\n                                    </div>\n                                </div> \n                            );\n                        }\n                        else {\n                            return (\n                                <div key={index}>\n                                    <Marker\n                                        position={{lat: patient.lat, lng: patient.lng}}\n                                        onClick={() => onClickMarker(patient)}\n                                    />\n                                </div>\n                            )\n                        }\n                    })\n                }\n            </GoogleMap>\n        </LoadScriptNext>\n    )\n}\n\nexport default MapView;","import React, {useRef, memo, useEffect} from 'react';\nimport { FixedSizeList as FixedList, areEqual } from 'react-window';\nimport './ListView.scss';\n\nconst ListView = ({patients, itemIndex, onClickPatient}) => {\n    const listRef = useRef();\n\n    const Row = memo(props => {\n        const {data, index, style} = props;\n        const className = data.itemIndex === index ? 'PatienIndicator Highlight' : 'PatientIndicator';\n        return (<button\n            key={index} \n            className={className}\n            onClick={() => data.onClickPatient(data.patients[index])}\n            style={style}     \n        >\n            {data.patients[index].name}\n        </button>)\n    }, areEqual);\n    \n    const patientsLength = patients ? Object.keys(patients).length : 0;\n\n    const data = Object.assign({}, {patients: patients}, {onClickPatient: onClickPatient}, {itemIndex: itemIndex});\n    \n    useEffect(() => {\n        if (itemIndex) {\n            listRef.current.scrollToItem(itemIndex, 'smart');\n        }\n    })\n\n    return (\n        <FixedList\n            className=\"List\"\n            height={300}\n            itemCount={patientsLength}\n            itemSize={50}\n            width={\"100%\"}\n            ref={listRef}\n            itemData={data}\n        >\n            {Row}\n        </FixedList>\n    )\n}\n\nexport default memo(ListView);","import React, {memo, Fragment} from 'react';\nimport './PatientInfo.scss';\n\nconst PatientInfo = ({patient}) => {\n    const date = patient ? patient.verifyDate.substring(0, 10) : \"\";\n    \n    return (\n        <Fragment>\n            <div><span>Name: </span>{patient ? patient.name : \"\"}</div>\n            <div><span>Address: </span>{patient ? patient.address : \"\"}</div>\n            <div><span>Patient Group: </span>{patient ? patient.patientGroup : \"\"}</div>\n            <div><span>Note: </span>{patient ? patient.note : \"\"}</div>\n            <div><span>Verify Date: </span>{date}</div>\n        </Fragment>\n    )\n}\n\nexport default memo(PatientInfo);","import React, {useState, useEffect, useCallback, useRef, Fragment} from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport moment from 'moment';\nimport './SliderBar.scss';\n\nconst SliderBar = ({handleSlider}) => {\n    const [value, setValue] = useState(0);\n    const [playable, setPlayable] = useState(false);\n    const [speed, setSpeed] = useState(1000);\n    const speedRef = useRef();\n\n    const increaseValue = useCallback(() => {\n        const chosenDate = moment(initialDate).add(value, 'days').format('YYYY-MM-DDT00:00:00');\n        handleSlider(chosenDate);\n        setValue(value + 1);\n    }, [value, handleSlider]);\n\n    const today = moment(new Date()).format('YYYY-MM-DDT00:00:00');\n    const initialDate = \"2019-12-08T00:00:00\";\n\n    const endValue = moment(today).diff(initialDate, 'days');\n\n    useEffect(() => {\n        if (playable === true) {\n            const intervalId = setInterval(increaseValue, speed);\n            return () => {\n                clearInterval(intervalId);\n            }\n        }\n    }, [playable, increaseValue, speed]);\n\n    useEffect(() => {\n        if (value > endValue) {\n            setValue(endValue);\n            setPlayable(false);\n        }\n    }, [value, endValue]);\n\n    const autoPlay = () => {\n        setPlayable(!playable);\n    };\n\n    const valueText = value => {\n        const chosenDate = moment(initialDate).add(value, 'days').format('DD/MM/YYYY');\n        return `${chosenDate}`;\n    }\n\n    const marks = [\n        {\n            value: 0,\n            label: moment(initialDate).format('DD/MM/YYYY')\n        },\n        {\n            value: endValue,\n            label: moment(today).format('DD/MM/YYYY')\n        }\n    ]\n\n    const handleChange = (event, newValue) => {\n        const chosenDate = moment(initialDate).add(value, 'days').format('YYYY-MM-DDT00:00:00');\n        handleSlider(chosenDate);\n        if (playable ===  true) {\n            setPlayable(false);\n        }\n        setValue(newValue);\n    }\n\n    const handleOk = () => {\n        const speed = speedRef.current.value;\n        setSpeed(speed);\n    }\n\n    const buttonClass = playable ? 'PlayButton pause' : 'PlayButton';\n\n    console.log(\"SliderBar rendering...\");\n    return (\n        <Fragment>\n            <div className=\"SliderSection\">\n                <div className=\"ButtonArea\">\n                    <button className={buttonClass} onClick={autoPlay}></button>\n                </div>\n                <Slider\n                    className=\"Slider\"\n                    classes = {\n                        {\n                            valueLabel: \"Label\", \n                            rail: \"Rail\",\n                            track: \"Track\",\n                            markLabel: \"MarkLabel\"\n                        }\n                    }\n                    value={value}\n                    step={1}\n                    valueLabelDisplay=\"on\"\n                    valueLabelFormat={valueText}\n                    marks={marks}\n                    onChange={handleChange}\n                    min={0}\n                    max={endValue}\n                />\n                <div className=\"Speed\">\n                    <label>Choose speed: </label>\n                    <select ref={speedRef} defaultValue={1000}>\n                        <option>100</option>\n                        <option>250</option>\n                        <option>500</option>\n                        <option>750</option>\n                        <option>1000</option>\n                        <option>1250</option>\n                        <option>1500</option>\n                        <option>2000</option>\n                    </select>\n                    <button onClick={handleOk}>OK</button>\n                </div>\n            </div> \n        </Fragment>\n    )\n};\n\nexport default SliderBar;\n\n","import React from 'react';\nimport './LinkContainer.scss';\n\nconst LinkContainer = ({children, active}) => {\n    const className = active ? 'LinkContainer active' : 'LinkContainer';\n\n    return (\n        <div className={className}>\n            {children}\n        </div>\n    )\n}\n\nexport default LinkContainer;","import React, {useState, useEffect, Fragment } from 'react';\nimport MapView from './mapview/MapView';\nimport './CovidMap.scss';\nimport ListView from './listview/ListView';\nimport PatientInfo from './patient_info/PatientInfo';\nimport SliderBar from './sliderbar/SliderBar';\nimport LinkContainer from '../LinkContainer/LinkContainer';\nimport {Link} from 'react-router-dom';\nimport axios from 'axios';\n\nconst CovidMap = () => {\n    const [patients, setPatients] = useState({patientsData: [], patientSlider: []});\n    const [selectedPatient, setSelectedPatient] = useState(null);\n\n    const initialDate = \"2019-12-08T00:00:00\";\n\n    useEffect(() => {\n        axios.get(\"https://cors-anywhere.herokuapp.com/maps.vnpost.vn/apps/covid19/api/patientapi/list\")\n            .then(res => {\n                const patientSlider = res.data.data.filter(patient => patient.verifyDate <= initialDate);\n                const sortedPatientSlider  = patientSlider.sort((a, b) => {\n                    if (new Date(a.verifyDate) > new Date(b.verifyDate)) {\n                        return -1;\n                    }\n                    else if (new Date(a.verifyDate) < new Date(b.verifyDate)) {\n                        return 1;\n                    }\n                    else {\n                        return 0;\n                    }\n                });\n                const newPatients = sortedPatientSlider.map((patient, index) => {\n                    return {\n                        ...patient,\n                        index: index\n                    }\n                });\n                setPatients({patientsData: res.data.data, patientSlider: newPatients});\n            });\n    }, []);\n\n    const handleMarkerClicked = (patient) => {\n        setSelectedPatient(patient);\n    }\n\n    const handlePatientClicked = (patient) => {\n        setSelectedPatient(patient);\n    }\n\n    const handleSlider = (checkDate) => {\n        const ptSlider = patients.patientsData.filter(patient => patient.verifyDate <= checkDate);\n        if (ptSlider.length !== patients.patientSlider.length) {\n            const sortedPatientSlider  = ptSlider.sort((a, b) => {\n                if (new Date(a.verifyDate) > new Date(b.verifyDate)) {\n                    return -1;\n                }\n                else if (new Date(a.verifyDate) < new Date(b.verifyDate)) {\n                    return 1;\n                }\n                else {\n                    return 0;\n                }\n            });\n            const newPatients = sortedPatientSlider.map((patient, index) => {\n                return {\n                    ...patient,\n                    index: index\n                }\n            });\n            setPatients({...patients, patientSlider: newPatients});\n        }\n        else {\n            return;\n        }\n    }\n\n    return (\n        patients.patientsData.length === 0 ? <div className=\"Loading\">Loading...</div> :\n        <Fragment>\n            <section className=\"Navigation\">\n                <Link to=\"/\" className=\"Link\">\n                    <LinkContainer active={true}>Covid19 Map</LinkContainer>\n                </Link>\n                <Link to=\"/stats\" className=\"Link\">\n                    <LinkContainer active={false}>Covid19 Stats</LinkContainer>\n                </Link>\n            </section>\n            <div className=\"Container\">\n                <section className=\"MapView\">\n                    <MapView \n                        patients={patients.patientSlider}\n                        onClickMarker={handleMarkerClicked}\n                        selectedPatient={selectedPatient}\n                    />\n                </section>\n                <section className=\"DashBoard\">\n                    <div className=\"DashBoard-Title\">DashBoard</div>\n                    <div className=\"PatientInfo\">\n                        <div className=\"title\">Patient Info</div>\n                        <PatientInfo patient={selectedPatient} />\n                    </div>\n                    <div>\n                        <div className=\"title\">List View</div>\n                        <ListView \n                            patients={patients.patientSlider}\n                            itemIndex={selectedPatient ? selectedPatient.index : null}\n                            onClickPatient={handlePatientClicked}\n                        />\n                    </div> \n                </section>\n            </div>\n            <div className=\"Container\">\n                <section className=\"SliderBar\">\n                    <SliderBar \n                        handleSlider={handleSlider}\n                    />\n                </section>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default CovidMap;","import React, { Fragment, useEffect, useState } from 'react';\nimport LinkContainer from '../LinkContainer/LinkContainer';\nimport {Link} from 'react-router-dom';\nimport './CovidStats.scss';\nimport axios from 'axios';\nimport {LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';\n\nconst CovidStats = () => {\n    const [worldData, setWorldData] = useState(null);\n    const [vnData, setVNData] = useState(null);\n\n    useEffect(() => {\n        axios.get('https://td.fpt.ai/corona/corona-total.json')\n            .then(res => {\n                const worldData = Object.keys(res.data).map(key => {\n                    return {date: key, infected: res.data[key][0], dead: res.data[key][1], cured: res.data[key][2]}\n                });\n                setWorldData(worldData);\n            });\n        axios.get('https://td.fpt.ai/corona/corona-chart-vn.json')\n            .then(res => {\n                const vnData = Object.keys(res.data).map(key => {\n                    return {date: key, infected: res.data[key][0], suspected: res.data[key][1], cured: res.data[key][2]}\n                });\n                setVNData(vnData);\n            });\n    }, []);\n\n    return (\n        worldData === null || vnData === null ? <div className=\"Loading\">Loading...</div> :\n        <Fragment>\n            <section className=\"Navigation\">\n                <Link to=\"/\" className=\"Link\">\n                    <LinkContainer active={false}>Covid19 Map</LinkContainer>\n                </Link>\n                <Link to=\"/stats\" className=\"Link\">\n                    <LinkContainer active={true}>Covid19 Stats</LinkContainer>\n                </Link>\n            </section>\n            <div className=\"Container\">\n                <section className=\"Chart\">\n                    <div className=\"Title\">COVID19 Statistics of Viet Nam from Dec 08 2019 to now</div>\n                    <LineChart\n                            width={600}\n                            height={500}\n                            data={vnData}\n                            margin={{top: 5, right: 30, left: 20, bottom: 5,}}\n                        >\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\n                            <XAxis dataKey=\"date\" />\n                            <YAxis />\n                            <Tooltip />\n                            <Legend />\n                            <Line type=\"monotone\" dataKey=\"infected\" stroke=\"#8884d8\" />\n                            <Line type=\"monotone\" dataKey=\"suspected\" stroke=\"#ff0000\" />\n                            <Line type=\"monotone\" dataKey=\"cured\" stroke=\"#82ca9d\" />\n                        </LineChart>\n                </section>\n                <section className=\"Chart\">\n                    <div className=\"Title\">COVID19 Statistics of World from Dec 08 2019 to now</div>\n                    <LineChart\n                        width={600}\n                        height={500}\n                        data={worldData}\n                        margin={{top: 5, right: 30, left: 20, bottom: 5,}}\n                    >\n                        <CartesianGrid strokeDasharray=\"3 3\"/>\n                        <XAxis dataKey=\"date\" />\n                        <YAxis />\n                        <Tooltip payload={[{ name: '05-01', value: 12, unit: 'kg' }]} />\n                        <Legend />\n                        <Line type=\"monotone\" dataKey=\"infected\" stroke=\"#8884d8\" />\n                        <Line type=\"monotone\" dataKey=\"dead\" stroke=\"#ff0000\" />\n                        <Line type=\"monotone\" dataKey=\"cured\" stroke=\"#82ca9d\" />\n                    </LineChart>\n                </section>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default CovidStats;","import React from 'react';\nimport './App.scss';\nimport CovidMap from './components/covid-map/CovidMap';\nimport CovidStats from './components/covid-stats/CovidStats';\nimport {HashRouter, Switch, Route} from 'react-router-dom';\n\nconst App = (props) => {\n  return (\n    <HashRouter basename=\"/\">\n      <Switch>\n        <Route exact path='/stats'>\n          <CovidStats />\n        </Route>\n        <Route exact path='/'>\n          <CovidMap />\n        </Route>\n        <Route><div>Page Not Found</div></Route>\n      </Switch>\n    </HashRouter>  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}